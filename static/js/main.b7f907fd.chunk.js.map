{"version":3,"sources":["logo.svg","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["module","exports","Card","props","id","name","email","className","src","alt","CardList","robots","cards","map","user","i","key","SearchBox","type","placeholder","onChange","onSearchChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onRequestRobots","searchField","isPending","console","log","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialSearchState","initialRobotState","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b7f907fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst Card = (props) => {\n  const {id, name, email} = props;\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = (props) => {\n  const { robots } = props;\n\n  const cards = robots.map((user, i) => {\n    return <Card\n      key={i}\n      id={robots[i].id}\n      name={robots[i].name}\n      email={robots[i].email}\n    />\n  });\n  \n  return (\n    <div>\n      {cards}\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = (props) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search robots\"\n        onChange={props.onSearchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;\n","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError : false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({\n      hasError: true\n    })\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return <h1> An error occurred!!</h1>\n    }\n\n    return (\n      this.props.children\n    )\n  }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\nimport logo from '../logo.svg';\nimport './App.css';\nimport CardList from '../components/CardList'\nimport { robots } from '../robots';\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport {setSearchField, requestRobots} from '../actions';\nimport {connect} from 'react-redux';\n\nimport './App.css'\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    isPending: state.requestRobots.isPending,\n    robots: state.requestRobots.robots,\n    error: state.requestRobots.error,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  }\n}\n\nclass App extends React.Component {\n\n  componentDidMount(){\n    this.props.onRequestRobots();\n  }\n\n  render () {\n    const { searchField , onSearchChange, robots, isPending} = this.props;\n    console.log(searchField)\n    const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    if(isPending){\n      return (<h1>Loading</h1>)\n    } else {\n      return (\n        <div className=\"tc\">\n          <h1 className=\"f1\">Robot friends</h1>\n          <SearchBox onSearchChange={onSearchChange}/>\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots}/>\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => {\n  return ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  })\n}\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({type: REQUEST_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n  .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\n\nconst initialSearchState = {\n  searchField: '',\n}\n\nconst initialRobotState = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const searchRobots = (state=initialSearchState, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ... state, searchField: action.payload};\n    default:\n      return state;\n  }\n\n}\n\nexport const requestRobots = (state=initialRobotState, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ... state, isPending: true};\n    case REQUEST_ROBOTS_SUCCESS:\n      console.log(action.payload)\n      return { ... state, isPending: false, robots: action.payload};\n      case REQUEST_ROBOTS_FAILED:\n        return { ... state, isPending: false, error: action.payload};\n    default:\n      return state;\n  }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {searchRobots, requestRobots} from './reducers';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n                <Provider store={store}>\n                  <App />\n                </Provider>\n                , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}